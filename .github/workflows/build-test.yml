name: build & test
on:
  push:
    branches: main
    paths:
      - '**.py'
      - .github/workflows/build-test.yml
  pull_request:
    paths:
      - '**.py'
      - .github/workflows/build-test.yml
  workflow_dispatch:
    inputs:
jobs:
  build-test-go-versions:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [1.18]
        test-path: 
          - ./tutorials/conversion_obj_step
          - ./tutorials/conversion_obj_stl

    steps:
      - uses: actions/checkout@v3
      - name: Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v3
        with:
          python-version: ${{ matrix.go-version }}

      # - name: Install dependencies
      #   shell: bash
      #   run: |
      #     pip install -r requirements.txt

      - name: Run scripts
        shell: bash
        run: |
          FILE=$(find ${{ matrix.test-path }} -name "*.go")
          go run $FILE
        env:
          KITTYCAD_API_TOKEN: ${{secrets.KITTYCAD_API_TOKEN}}

  build-test-python-versions:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.7, 3.8, 3.9]
        test-path: 
          - ./tutorials/conversion_obj_step
          - ./tutorials/conversion_obj_stl

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        shell: bash
        run: |
          pip install -r requirements.txt

      - name: Run scripts
        shell: bash
        run: |
          FILE=$(find ${{ matrix.test-path }} -name "*.py")
          python $FILE
        env:
          KITTYCAD_API_TOKEN: ${{secrets.KITTYCAD_API_TOKEN}}


  # test-setup:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: remove previous outputs
  #       shell: bash
  #       run: rm -rf tutorials/**/*output.{stl,step}

  test-output:
    needs: [build-test-python-versions]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        shell: bash
        run: |
          pip install -r requirements.txt

      - name: remove previous outputs
        shell: bash
        run: rm -rf tutorials/**/*output.{stl,step}

      - name: test outputs
        run: |

          files=( "./tutorials/conversion_obj_step"
                  "./tutorials/conversion_obj_stl" 
          )
          for FILE in "${files[@]}"
          do
              FULL_FILE=$(find $FILE -name "*.py")
              echo "bing $FULL_FILE"
              python $FULL_FILE
              mv output.* $FILE
              if [ $(find $FILE -name output.*)  ]; then
                  echo "$FILE output was created."
              else 
                  echo "better luck next time"
                  exit 1
              fi
            echo "done $FILE"
          done

          echo "all done"
        env:
          KITTYCAD_API_TOKEN: ${{secrets.KITTYCAD_API_TOKEN}}

      # - name: Run scripts
      #   shell: bash
      #   run: |
      #     FILE=$(find ${{ matrix.test-path }} -name "*.py")
      #     python $FILE
      #   env:
      #     KITTYCAD_API_TOKEN: ${{secrets.KITTYCAD_API_TOKEN}}
      
      # - name: move test output into it's directory
      #   run: mv output.* ${{ matrix.test-path }}

      - name: git status
        run: git status
          
      # - name: Check output
      #   shell: bash
      #   run: |
      #     if [ $(find ${{ matrix.test-path }} -name output.*)  ]; then
      #         echo "${{ matrix.test-path }} output was created."
      #     else
      #         echo "no luck"
      #         exit 1
      #     fi

    
  # commit-files:
  #   needs: [test-output]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: git status
  #       run: git status
      
